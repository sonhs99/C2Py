< Root >
Entry Point : main
defvar : 
defunc : 
[ 0 ]
  < DefFunction >
  name : main
  return : 
    < BasicType >
    name : int
  args : 
  block : 
    < Block >
    vars : 
    [ 0 ]
      < DefVar >
      type : 
        < Type >
        basic type : 
          < BasicType >
          name : int
      names : 
        [ 0 ]
        name : b
        init : 
          < BinaryOp >
          op : +
          lhs : 
            < Variable >
            name : c
          rhs : 
            < Void >
    stmts : 
    [ 0 ]
      < FunctionCall >
      name : func
      args : 
      [ 0 ]
        < Variable >
        name : c
    [ 1 ]
      < BinaryOp >
      op : =
      lhs : 
        < Variable >
        name : b
      rhs : 
        < FunctionCall >
        name : func
        args : 
        [ 0 ]
          < BinaryOp >
          op : *
          lhs : 
            < Variable >
            name : a
          rhs : 
            < Number >
            number : 3
        [ 1 ]
          < BinaryOp >
          op : -
          lhs : 
            < Variable >
            name : c
          rhs : 
            < Number >
            number : 4
    [ 2 ]
      < For >
      cond : 
        < BinaryOp >
        op : in
        lhs : 
          < Variable >
          name : c
        rhs : 
          < Variable >
          name : b
      stmt : 
        < BinaryOp >
        op : =
        lhs : 
          < Variable >
          name : c
        rhs : 
          < Variable >
          name : i
